{"version":3,"sources":["OtherComponents/Marker.jsx","Restaurant/RestaurantMap.jsx","Restaurant/RestaurantInfo.jsx","Restaurant/RestaurantImage.jsx","App/Header.jsx","Restaurant/RestaurantContainer.jsx","App/Start.jsx","App/App.js","serviceWorker.js","index.js"],"names":["Marker","props","color","name","className","style","backgroundColor","cursor","title","RestaurantMap","height","width","defaultCenter","this","center","lat","lng","zoom","yesIWantToUseGoogleMapApiInternals","Component","defaultProps","RestaurantInfo","Card","Body","Title","Text","category","rate","RestaurantImage","console","log","image","Image","src","thumbnail","Header","Navbar","bg","expand","Brand","href","alt","Toggle","aria-controls","Collapse","id","Nav","Link","RestaurantContainer","fetchData","fetch","userlocation1","method","headers","Accept","then","response","json","data","setState","parseFloat","lon","info","cat","rating","catch","error","state","requestStatus","Container","Button","variant","size","onClick","Start","triggerStartState","isEmptyState","isStartState","getUserLocation","navigator","geolocation","getCurrentPosition","showPosition","position","userlocation","coords","latitude","longitude","start","StartButton","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9bba38e.chunk.js","sourcesContent":["import React from 'react';\nimport './Marker.css'\nconst Marker = (props) => {\n    const { color, name} = props;\n    return (\n        <div>\n            <div\n                className=\"pin bounce\"\n                style={{ backgroundColor: color, cursor: 'pointer' }}\n                title={name}\n            />\n         \n        </div>\n    );\n};\n\nexport default Marker;","import React, { Component } from 'react';\nimport GoogleMapReact from \"google-map-react\";\nimport Marker from \"../OtherComponents/Marker\";\n\n\nclass RestaurantMap extends Component {\n  static defaultProps = {\n    center: {\n      lat: 59.95,\n      lng: 30.33\n    },\n    zoom: 11\n  };\n  \n  render() {\n    return (\n      <div style={{ height: \"100vh\", width: \"100%\" }}>\n        <GoogleMapReact\n          // bootstrapURLKeys={{ key: /* YOUR KEY HERE */ }}\n          defaultCenter={this.props.center}\n          center={{ lat: this.props.center.lat, lng: this.props.center.lng }}\n          zoom={11}\n          yesIWantToUseGoogleMapApiInternals\n        >\n          <Marker\n            color='#00cae9'\n            name=\"My Marker\"\n            lat={this.props.center.lat}\n            lng={this.props.center.lng}\n          />\n        </GoogleMapReact>\n      </div>\n    );\n   \n  }\n  \n}\n \nexport default RestaurantMap;","import React, { Component } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./RestaurantContainer.css\";\nclass RestaurantInfo extends Component {\n  render() {\n    return (\n      <Card className=\"card\">\n        <Card.Body>\n          <Card.Title>{this.props.title}</Card.Title>\n          <Card.Text>\n            {this.props.category} - {this.props.rate} / 10\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default RestaurantInfo;\n","import React, { Component } from 'react';\nimport { Image } from \"react-bootstrap\";\n\nclass RestaurantImage extends Component {\n    render() { \n        console.log( this.props.image );\n\n        return <Image src={this.props.image} thumbnail />;\n    }\n}\n \nexport default RestaurantImage;","import React from \"react\";\nimport \"../App/Header.css\";\nimport {  Navbar, Nav, NavDropdown } from \"react-bootstrap\";\n\nexport default function Header() {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <br />\n\n      <Navbar.Brand href=\"#home\">\n        <img\n          alt=\"\"\n          src=\"../../assets/logo.svg\"\n          width=\"30\"\n          height=\"30\"\n          className=\"d-inline-block align-top\"\n        />{\" \"}\n        Wain Nakel\n      </Navbar.Brand>\n\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#link\">About</Nav.Link>\n          \n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n","import React, { Component } from \"react\";\nimport RestaurantMap from \"./RestaurantMap\";\nimport RestaurantInfo from \"./RestaurantInfo\";\nimport RestaurantImage from \"./RestaurantImage\";\nimport { Button, Container} from \"react-bootstrap\";\nimport Header from \"../App/Header\";\nimport \"../App/Header.css\";\n\nimport \"./RestaurantContainer.css\";\n\nclass RestaurantContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      center: {\n        lat: this.props.userlocation1[0],\n        lng: this.props.userlocation1[1]\n      },\n      zoom: 11,\n      info: {\n        title: \"Resturant Name\",\n        category: \"Category\",\n        rate: 0,\n        image: \"\"\n      },\n      requestStatus: \"faild\"\n    };\n    console.log(this.props.userlocation1[0]);\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  fetchData = () => {\n    fetch(\n      `https://cors-anywhere.herokuapp.com/https://wainnakel.com/api/v1/GenerateFS.php?uid=${\n        this.props.userlocation1[0]\n      },${this.props.userlocation1[1]}&g et_param=value`,\n      {\n        method: \"GET\",\n        headers: { Accept: \"application/json\" }\n      }\n    )\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          center: { lat: parseFloat(data.lat), lng: parseFloat(data.lon) },\n\n          info: {\n            title: data.name,\n            category: data.cat,\n            rate: data.rating,\n            image: data.image\n          }\n        });\n      })\n\n      .catch(function(error) {\n        console.log(error);\n      });\n  };\n\n  render() {\n    console.log(this.state.info.image);\n    const { requestStatus } = this.state;\n    //  if  (requestStatus == 'faild') return <h1>Opps something went wrong with the api</h1>;\n    return (\n      <Container>\n        <div id=\"box-wrapper\">\n          <Header />\n          <RestaurantInfo\n            title={this.state.info.title}\n            category={this.state.info.category}\n            rate={this.state.info.rate}\n          />\n        </div>\n        <div id=\"map-wrapper\">\n          <div id=\"map\">\n            <RestaurantMap center={this.state.center} />\n          </div>\n          <div id=\"button-wrapper\">\n            <Button variant=\"info\" size=\"lg\" onClick={this.fetchData}>\n              Suggest New\n            </Button>\n          </div>\n\n          <div id=\"img-wrapper\">\n            <RestaurantImage image={this.state.info.image} />\n          </div>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default RestaurantContainer;\n","import React, { Component } from \"react\";\nimport RestaurantContainer from \"../Restaurant/RestaurantContainer\";\nimport {Button,Image} from \"react-bootstrap\";\nclass Start extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEmptyState: true,\n\n      userlocation: [0, 0]\n    };\n  }\n\n  componentDidMount() {\n    this.getUserLocation();\n  }\n  triggerStartState = () => {\n    this.setState({\n      ...this.state,\n      isEmptyState: false,\n      isStartState: true\n    });\n  };\n\n  getUserLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.showPosition);\n    }\n  };\n\n  showPosition = position => {\n    this.setState({\n      userlocation: [position.coords.latitude, position.coords.longitude]\n    });\n  };\n\n  render() {\n    return (\n     \n        \n          <div >\n           \n            {this.state.isEmptyState && (\n              <StartButton start={this.triggerStartState} />\n            )}\n\n            {this.state.isStartState && (\n              <RestaurantContainer userlocation1={this.state.userlocation} />\n            )}\n          </div>\n      \n    );\n  }\n}\n\nexport default Start;\n\nexport const StartButton = props => {\n  return (\n    <div>\n      <Image src=\"logo512.png\" thumbnail />\n\n      <h1>Wain Nakel</h1>\n      <Button variant=\"info\" size=\"lg\" onClick={props.start}>\n        Suggest Restaurant\n      </Button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.css';\nimport Start from './Start'\n\n\nfunction App() {\n  \n  return (\n   \n    <div className='App'>\n   \n      <div className='Content'>\n        <Start />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}